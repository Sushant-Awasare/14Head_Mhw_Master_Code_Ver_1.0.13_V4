/*
 * data_flash_code.c
 *
 *  Created on: Apr 10, 2023
 *      Author: COE04
 */
/*
 * data_flash.c
 *
 *  Created on: 14-Apr-2021
 *      Author: User
 */
/************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only
* intended for use with Renesas products. No other uses are authorized. This
* software is owned by Renesas Electronics Corporation and is protected under
* all applicable laws, including copyright laws.
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
* LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
* AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR
* ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE
* BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software
* and to discontinue the availability of this software. By using this software,
* you agree to the additional terms and conditions found by accessing the
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2018(2019) Renesas Electronics Corporation. All rights reserved.
*************************************************************************************************/
/************************************************************************************************
* File Name    : r_datfrx_rx_main.c
* Version      : 2.01
* Description  : DATFRX interface source file
*************************************************************************************************/
/************************************************************************************************
* History      : DD.MM.YYYY Version  Description
*              : 28.09.2018 2.00     First Release
*              : 25.01.2019 2.01     English PDF added, Fixed blank check processing
*************************************************************************************************/

/***********************************************************************************************************************
Includes   <System Includes> , "Project Includes"
***********************************************************************************************************************/
//#include "r_datfrx_rx_config.h"
//#include "platform.h"
//#include "r_flash_dm_rx_if.h"



#include "r_datfrx_rx_config.h"
#include "platform.h"
#include "r_flash_dm_rx_if.h"
#include "data_flash_functions.h"
#include "data_flash_variables.h"
#include "global_functions.h"
#include "global_variables.h"
#include "modbus_variables.h"
#include <stdint.h>
#include <stdbool.h>

/***********************************************************************************************************************
Macro definitions
***********************************************************************************************************************/
/* Please set the number of loops. */
#define LOOP_CNT (1)
/* Please set the maximum data size. */
//#define TEST_BUFF_NUM (255)
//extern void Clr_WatchDog();
/***********************************************************************************************************************
Typedef definitions
***********************************************************************************************************************/
typedef enum _datfrx_status
{
    DATFRX_IDLE,
    DATFRX_RUN_FORMAT,
    DATFRX_SUCCESS_INIT,
    DATFRX_FINISH_FORMAT,
    DATFRX_FINISH_WRITE,
    DATFRX_FINISH_ERASE,
    DATFRX_FINISH_RECLAIM,
    DATFRX_ERR
} e_datfrx_status_t;

/***********************************************************************************************************************
Exported global variables
***********************************************************************************************************************/

/***********************************************************************************************************************
Private variables and functions
***********************************************************************************************************************/


void open_dataflash();

#if(FLASH_TYPE == FLASH_TYPE_1)
static uint32_t gs_flash_dm_work[140/sizeof(uint32_t)];
#else
static uint32_t gs_flash_dm_work[(261 + (FLASH_DM_CFG_DF_DATA_NUM * 2))/sizeof(uint32_t)+1];
#endif

//uint8_t gs_test_w_buff[TEST_BUFF_NUM]={'q','w','e','r','t','y','u','i'};


st_flash_dm_info_t g_flash_dm_info;
uint16_t g_data_num = FLASH_DM_CFG_DF_DATA_NUM - 1;
volatile uint16_t g_loop_cnt = 0;
volatile uint16_t g_proc_flag = DATFRX_IDLE;

/**********************************************************************************************************************
* Outline      : ERROR Processing
* Function Name: trap
* Description  : Error
* Arguments    : -
* Return Value : -
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
static void trap(uint32_t test_no)
{
    while(test_no)                        // commented by dny 15/2/23
    {
        /* Do Nothing. */
        nop();
        test_no--;
    };
}

/**********************************************************************************************************************
* Outline      : Test Data Setting Processing
* Function Name: test_data_set
* Description  : Sets test data.
* Arguments    : uint32_t * p_buf       ; Pointer of test buffer.
*              : uint32_t   cnt         ; Test block number.
*              : uint32_t   inc         ; Loop count
* Return Value : None
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
/*static void test_data_set(uint8_t * p_buf, uint32_t cnt, uint32_t inc)
{
    uint32_t  i;

    for (i = 0; i < cnt; i++)
    {

        *p_buf++ = (uint8_t)(i + inc);
    }
}
*/
/**********************************************************************************************************************
* Function Name: testwrite
* Description  : testwrite
* Arguments    : void
* Return Value : void
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
static void testwrite(uint16_t gs_test_w_buff[])
{
    e_flash_dm_status_t ret = FLASH_DM_SUCCESS;

    /* ==== WRITE ==== */
    //test_data_set(&gs_test_w_buff[0], TEST_BUFF_NUM, g_loop_cnt);
    g_flash_dm_info.data_no = g_data_num;
    /* cast from uint32_t to uint8_t* */
    g_flash_dm_info.p_data  = (uint8_t *)&gs_test_w_buff[0];
    ret = R_FLASH_DM_Write(&g_flash_dm_info);

    if(ret == FLASH_DM_ERR_REQUEST_ERASE)
    {
        ret = R_FLASH_DM_Erase();
        if(ret != FLASH_DM_ACCEPT)
        {
            trap(1);
        }
    }


    #if(FLASH_TYPE == 1)
    else if(ret == FLASH_DM_ERR_REQUEST_RECLAIM)
    {
        ret = R_FLASH_DM_Reclaim();
        if(ret == FLASH_DM_ERR_REQUEST_ERASE)
        {
            ret = R_FLASH_DM_Erase();
            if(ret != FLASH_DM_ACCEPT)
            {
                trap(2);
            }
        }
        else if(ret != FLASH_DM_ACCEPT)
        {
            trap(3);
        }
        else
        {
            // Do Nothing
        }
    }
#endif
    else if(ret != FLASH_DM_ACCEPT)
    {
        trap(4);
    }
    else
    {
        // Do Nothing
    }
}

/**********************************************************************************************************************
* Outline      : testinit
* Function Name: testinit
* Description  : Error
* Arguments    : void
* Return Value : void
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
static void init_dataflash(void)
{
    e_flash_dm_status_t ret = FLASH_DM_SUCCESS;

#if(FLASH_TYPE == FLASH_TYPE_1)
    /* ==== INITIALIZE ==== */
    ret = R_FLASH_DM_Init();

    if(ret == FLASH_DM_SUCCESS)
    {
        g_proc_flag = DATFRX_SUCCESS_INIT;
    }
    else if(ret == FLASH_DM_SUCCESS_REQUEST_ERASE)
    {
        ret = R_FLASH_DM_Erase();
        if(ret != FLASH_DM_ACCEPT)
        {
            trap(5);
        }
    }
    else if(ret == FLASH_DM_ERR_BUSY)
    {
        /* === CONTINUE TO LOOP ===*/
        /* Do Nothing */
        nop();
    }
    else if(ret == FLASH_DM_ERR_REQUEST_FORMAT)
    {
        ret = R_FLASH_DM_Format();
        if(ret != FLASH_DM_ACCEPT)
        {
            trap(6);
        }
        else
        {
            g_proc_flag = DATFRX_RUN_FORMAT;
        }
    }
    else
    {
        trap(7);
    }

#else/* FLASH_TYPE */

    while(1)
    {
        /* ==== INITIALIZE ==== */
        ret = R_FLASH_DM_Init();
       if(ret == FLASH_DM_ADVANCE)
        {
            break;
        }
       if(ret == FLASH_DM_SUCCESS_REQUEST_ERASE)
        {
            ret = R_FLASH_DM_Erase();
            if(ret != FLASH_DM_ACCEPT)
            {
                trap(8);
            }
        }
        else if(ret == FLASH_DM_ERR_BUSY)
        {
            /* === CONTINUE TO LOOP ===*/
            /* Do Nothing */
            nop();
        }
        else
        {
            trap(9);
        }
    }

    while(1)
    {
        ret = R_FLASH_DM_InitAdvance();
        if(ret == FLASH_DM_SUCCESS)
        {
            g_proc_flag = DATFRX_SUCCESS_INIT;
            break;
        }
        else if(ret == FLASH_DM_ADVANCE)
        {
            /* === CONTINUE TO LOOP ===*/
            /* Do Nothing */
            nop();
        }
        else if(ret == FLASH_DM_ERR_BUSY)
        {
            /* === CONTINUE TO LOOP ===*/
            /* Do Nothing */
            nop();
        }
        else if(ret == FLASH_DM_ERR_REQUEST_FORMAT)
        {
            ret = R_FLASH_DM_Format();
            if(ret != FLASH_DM_ACCEPT)
            {
                trap(10);
            }
            else
            {
                g_proc_flag = DATFRX_RUN_FORMAT;
            }
            break;
        }
        else
        {
            /* === CONTINUE TO LOOP ===*/
            /* Do Nothing */
            trap(11);
        }
    }
#endif /* FLASH_TYPE */
}

/**********************************************************************************************************************
* Function Name: testmain
* Description  : testmain.
* Arguments    : void
* Return Value : void
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/

void write_run_data(uint16_t gs_test_w_buff[])
{
	//Clr_WatchDog();
    /* === OPEN ===*/
    if(FLASH_DM_SUCCESS != R_FLASH_DM_Open(gs_flash_dm_work, &ucb_function))
    {
        trap(12);
    }

    do
    {
    	init_dataflash();                  //initialising dataflash

        /* Do Nothing */
        while(g_proc_flag == DATFRX_RUN_FORMAT)
        {
            /* Do Nothing */
        }
    }
    while(g_proc_flag != DATFRX_SUCCESS_INIT);

    g_data_num = 0;

    testwrite(gs_test_w_buff);

    do
    {
        // Do nothing. wait for dataflash to write

    }
    while(g_loop_cnt < LOOP_CNT);


   // g_loop_cnt  = 0;


    R_FLASH_DM_Close();

    flash_write_done = 1;
    flash_write_done_flag = 1;
    flash_write_time = 50000;
    //Clr_WatchDog();
}

void read_run_data(void)
{
	//Clr_WatchDog();
    e_flash_dm_status_t ret = FLASH_DM_SUCCESS;

    /* === OPEN ===*/
    if (FLASH_DM_SUCCESS != R_FLASH_DM_Open(gs_flash_dm_work, &ucb_function))
    {
        trap(13);
    }

    do
    {
    	init_dataflash();
        /* Do Nothing */
        while(g_proc_flag == DATFRX_RUN_FORMAT)
        {
            /* Do Nothing */
        }
    }
    while(g_proc_flag != DATFRX_SUCCESS_INIT);

    g_data_num = 0;

    do
    {
        /* ====  VERYFY ==== */
        g_flash_dm_info.data_no = g_data_num;
        /* cast from uint32_t to uint8_t* */
        g_flash_dm_info.p_data  = (uint8_t *)&gs_test_r_buff[0];
        ret = R_FLASH_DM_Read(&g_flash_dm_info);

        if(ret != FLASH_DM_SUCCESS)
        {
            trap(14);
        }
        else if(ret == FLASH_DM_ERR_DATA_NOT_PRESENT)
        {

            trap(15);
        }
        else
        {
            /* Do Nothing. */
            nop();
        }
        g_data_num++;
    }while(g_data_num < LOOP_CNT);

    /*IN ONE LOOP COUNT 255 DATABYTE CAN BE READ WRITE
    dataflash type 1
    block 0 real start address 0x0010 0000
    block 0 real end address 0x0010 03FF*/
    /* ==== CLOSE ==== */
    R_FLASH_DM_Close();
    //Clr_WatchDog();
}

void erase(void)
{
	/*uint8_t i;
	for(i=0;i<TEST_BUFF_NUM;i++)
	{
	//	gs_test_w_buff[i] = 0xFF;
		gs_test_w_buff[i] = 1;
	}
	write_run_data(gs_test_w_buff);*/
	flash_err_t err;
	/* Common for Flash Type 1, 3, and 4 products. */
	/* Erases data flash memory blocks in order from smaller to larger block numbers starting from block 5. */
	/* The following code causes blocks 5 and 6 in data flash memory to be erased. */
	err = R_FLASH_Erase(FLASH_DF_BLOCK_5, 2);
	/* Check for errors. */
	if (FLASH_SUCCESS != err)
	{

	}
	/* For Flash Type 1 products */
	/* Erases code flash memory blocks in order from larger to smaller block numbers starting from block 5. */
	/* The following code causes blocks 4 and 5 in code flash memory to be erased. */
	err = R_FLASH_Erase(FLASH_CF_BLOCK_5, 2);
	/* Check for errors. */
	if (FLASH_SUCCESS != err)
	{

	}
	/* For Flash Type 3 and 4 products */
	/* Erases code flash memory blocks in order from smaller to larger block numbers starting from block 5. */
	/* The following code causes blocks 5 and 6 in code flash memory to be erased. */
	err = R_FLASH_Erase(FLASH_CF_BLOCK_5, 2);
	/* Check for errors. */
	if (FLASH_SUCCESS != err)
	{

	}
}

void open_dataflash()
{
	//Clr_WatchDog();
	    /* === OPEN ===*/
	    if(FLASH_DM_SUCCESS != R_FLASH_DM_Open(gs_flash_dm_work, &ucb_function))
	    {
	        trap(12);
	    }

	    do
	    {
	    	init_dataflash();                  //initialising dataflash
	        /* Do Nothing */
	        while(g_proc_flag == DATFRX_RUN_FORMAT)
	        {
	            /* Do Nothing */
	        }
	    }
	    while(g_proc_flag != DATFRX_SUCCESS_INIT);

	    g_data_num = 0;

	    R_FLASH_DM_Close();
	    //Clr_WatchDog();
}
/**********************************************************************************************************************
* Function Name: main
* Description  : main.
* Arguments    : void
* Return Value : void
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
/*void main(void)
{


	//erase();
    testmain(gs_test_w_buff);
    testmain_restoration();

   // erase();
    //testmain_restoration();
    while(1);
}*/

/**********************************************************************************************************************
* Function Name: ucb_function
* Description  : callback function.
* Arguments    : void
* Return Value : void
*----------------------------------------------------------------------------------------------------------------------
* Notes        : None
**********************************************************************************************************************/
static void ucb_function(void* error_code)
{
    e_flash_dm_status_t ret = FLASH_DM_SUCCESS;

    uint32_t i;
    uint32_t* pcfg;
    uint32_t data_size = 0;

    pcfg = &data_size;

    /* ==== SUCCESS ==== */
    /* cast from void* to e_flash_dm_status_t*/
    switch((e_flash_dm_status_t)error_code)
    {
        case FLASH_DM_FINISH_FORMAT:
        {
            g_proc_flag = DATFRX_FINISH_FORMAT;
            break;
        }
        break;

        case FLASH_DM_FINISH_WRITE :
        {
            g_proc_flag = DATFRX_FINISH_WRITE;
            /* ====  VERYFY ==== */
            g_flash_dm_info.data_no = g_data_num;
            /* cast from uint32_t to uint8_t* */
            g_flash_dm_info.p_data  = (uint8_t *)&gs_test_r_buff[0];
            ret = R_FLASH_DM_Read(&g_flash_dm_info);
            *pcfg = g_data_num;
            ret = R_FLASH_DM_Control(FLASH_DM_GET_DATA_SIZE, pcfg);

           // test_data_set(&gs_test_w_buff[0], TEST_BUFF_NUM, g_loop_cnt);



            for(i = 0; i < data_size ; i++)
            {
               // if(gs_test_w_buff[i] != gs_test_r_buff[i])    //  // commented by dny 15/2/23
                {
                    trap(16);

                }
            }

            /* ==== INCREASE COUNT & CLOSE CONFIRMATION ==== */
			if((++g_loop_cnt) >= LOOP_CNT)
			{
				break;
			};


            /* ==== Switch WRITTING DATANUMBER ==== */
            g_data_num = g_loop_cnt % FLASH_DM_CFG_DF_DATA_NUM;

            /* ==== WRITE ==== */
            //test_data_set(&gs_test_w_buff[0], TEST_BUFF_NUM, g_loop_cnt);
            g_flash_dm_info.data_no = g_data_num;
            /* cast from uint32_t to uint8_t* */
            g_flash_dm_info.p_data  = (uint8_t *)&gs_test_w_buff[0];
            ret = R_FLASH_DM_Write(&g_flash_dm_info);
            if(ret == FLASH_DM_ERR_REQUEST_ERASE)
            {
                ret = R_FLASH_DM_Erase();
                if(ret != FLASH_DM_ACCEPT)
                {
                    trap(17);
                }
            }
#if(FLASH_TYPE == FLASH_TYPE_1)
            else if(ret == FLASH_DM_ERR_REQUEST_RECLAIM)
            {
                ret = R_FLASH_DM_Reclaim();
                if(ret == FLASH_DM_ERR_REQUEST_ERASE)
                {
                    ret = R_FLASH_DM_Erase();
                    if(ret != FLASH_DM_ACCEPT)
                    {
                        trap(18);
                    }
                }
                else if(ret != FLASH_DM_ACCEPT)
                {
                    trap(19);
                }
                else
                {
                    /* Do Nothing */
                }
            }
#endif/* FLASH_TYPE_1 */
            else if(ret != FLASH_DM_ACCEPT)
            {
                trap(20);
            }
            else
            {
                /* Do Nothing */
            }
        }
        break;

        case FLASH_DM_FINISH_ERASE :
        {
            g_proc_flag = DATFRX_FINISH_ERASE;
            /* ==== ERASE ==== */
            ret = R_FLASH_DM_Erase();
            if(ret == FLASH_DM_NO_INVALID_BLOCK)
            {
                /* ==== Switch WRITTING DATANUMBER ==== */
                g_data_num = g_loop_cnt % FLASH_DM_CFG_DF_DATA_NUM;

                /* ==== WRITE ==== */
                //test_data_set(&gs_test_w_buff[0], TEST_BUFF_NUM, g_loop_cnt);
                g_flash_dm_info.data_no = g_data_num;
                /* cast from uint32_t to uint8_t* */
                g_flash_dm_info.p_data  = (uint8_t *)&gs_test_w_buff[0];
                ret = R_FLASH_DM_Write(&g_flash_dm_info);
#if(FLASH_TYPE == FLASH_TYPE_1)
                if(ret == FLASH_DM_ERR_REQUEST_RECLAIM)
                {
                    ret = R_FLASH_DM_Reclaim();
                    if(ret == FLASH_DM_ERR_REQUEST_ERASE)
                    {
                        ret = R_FLASH_DM_Erase();
                        if(ret != FLASH_DM_ACCEPT)
                        {
                            trap(21);
                        }
                    }
                    else if(ret != FLASH_DM_ACCEPT)
                    {
                        trap(22);
                    }
                    else
                    {
                        /* Do Nothing */
                    }
                }
                else
#endif/* FLASH_TYPE_1 */
                if(ret != FLASH_DM_ACCEPT)
                {
                    trap(23);
                }
                else
                {
                    /* Do Nothing */
                }
            }
            else if(ret != FLASH_DM_ACCEPT)
            {
                trap(24);
            }
            else
            {
                /* Do Nothing */
            }
        }
        break;

#if(FLASH_TYPE == FLASH_TYPE_1)
        case FLASH_DM_FINISH_RECLAIM :
        {
            g_proc_flag = DATFRX_FINISH_RECLAIM;
            /* ==== WRITE ==== */
            //test_data_set(&gs_test_w_buff[0], TEST_BUFF_NUM, g_loop_cnt);
            g_flash_dm_info.data_no = g_data_num;
            /* cast from uint32_t to uint8_t* */
            g_flash_dm_info.p_data  = (uint8_t *)&gs_test_w_buff[0];
            ret = R_FLASH_DM_Write(&g_flash_dm_info);
            if(ret == FLASH_DM_ERR_REQUEST_ERASE)
            {
                ret = R_FLASH_DM_Erase();
                if(ret != FLASH_DM_ACCEPT)
                {
                    trap(25);
                }
            }
            else if(ret != FLASH_DM_ACCEPT)
            {
                trap(26);
            }
            else
            {
                /* Do Nothing */
            }
        }
        break;
#endif/* FLASH_TYPE_1 */

        /* ==== FAILD ==== */
        case FLASH_DM_ERR_FORMAT:
        case FLASH_DM_ERR_WRITE :
        case FLASH_DM_ERR_ERASE :
        case FLASH_DM_ERR_RECLAIM:
        {
            g_proc_flag = DATFRX_ERR;
            trap(27);
        }
        break;
        default :
        {
            trap(28);
        }
        break;
    }
}

void flash_write_data()
{
	gs_test_w_buff[0]=records[100]; //Target_Wt
	gs_test_w_buff[1]=records[101]; //Target_Speed
	gs_test_w_buff[2]=records[102]; //NegErrorWt
	gs_test_w_buff[3]=records[103]; //PosErrorWt
	gs_test_w_buff[4]=records[104]; //Mainhead_Firing
	gs_test_w_buff[5]=records[105]; //All_head_firing
	gs_test_w_buff[6]=records[106]; //All_head_lf_ondelay
	gs_test_w_buff[7]=records[107]; //All_head_lf_ontime
	gs_test_w_buff[8]=records[108]; //All_head_fb_ondelay
	gs_test_w_buff[9]=records[109]; //All_head_fb_ontime
	gs_test_w_buff[10]=records[110]; //All_head_wb_ondelay
	gs_test_w_buff[11]=records[111]; //All_head_wb_ontime
	gs_test_w_buff[12]=records[112]; //All_head_cb_ondelay
	gs_test_w_buff[13]=records[113]; //All_head_cb_ontime
	gs_test_w_buff[14]=records[114]; //All_head_stepper_pattern
	gs_test_w_buff[15]=records[115]; //Discharge_ontime
	gs_test_w_buff[16]=records[116]; //MAX_STAGGER_TIME
	gs_test_w_buff[18]=records[118]; //NO_SELECT_COUNT
	gs_test_w_buff[19]=records[119]; //MHW_READY_TIME
 	gs_test_w_buff[20]=records[120]; //ADC_GAIN
	gs_test_w_buff[21]=records[121]; //ADC_SPEED
	gs_test_w_buff[22]=records[122]; //ADC_SAMPLE
	gs_test_w_buff[23]=records[123]; //ADC_DIFFERENCE_COUNT
	gs_test_w_buff[24]=records[124]; //ADC_STABLE_COUNT
	gs_test_w_buff[25]=records[125]; //AUTO_ZERO_INTERVAL
	gs_test_w_buff[26]=records[126]; //WEIGHING_RANGE
	gs_test_w_buff[27]=records[127]; //COMPENSATION
	gs_test_w_buff[28]=records[128]; //STABLE_TIME
	gs_test_w_buff[29]=records[170]; //MULTI_DUMP_DIV_COUNT
	gs_test_w_buff[30]=records[40]; //Head 1 Amplitude
	gs_test_w_buff[31]=records[41]; //Head 2 Amplitude
	gs_test_w_buff[32]=records[42]; //Head 3 Amplitude
	gs_test_w_buff[33]=records[43]; //Head 4 Amplitude
	gs_test_w_buff[34]=records[44]; //Head 5 Amplitude
	gs_test_w_buff[35]=records[45]; //Head 6 Amplitude
	gs_test_w_buff[36]=records[46]; //Head 7 Amplitude
	gs_test_w_buff[37]=records[47]; //Head 8 Amplitude
	gs_test_w_buff[38]=records[48]; //Head 9 Amplitude
	gs_test_w_buff[39]=records[49]; //Head 10 Amplitude
	gs_test_w_buff[40]=records[50]; //Head 11 Amplitude
	gs_test_w_buff[41]=records[51]; //Head 12 Amplitude
	gs_test_w_buff[42]=records[52]; //Head 13 Amplitude
	gs_test_w_buff[43]=records[53]; //Head 14 Amplitude
	gs_test_w_buff[44]=records[70]; //Head 1 On Time
	gs_test_w_buff[45]=records[71]; //Head 2 On Time
	gs_test_w_buff[46]=records[72]; //Head 3 On Time
	gs_test_w_buff[47]=records[73]; //Head 4 On Time
	gs_test_w_buff[48]=records[74]; //Head 5 On Time
	gs_test_w_buff[49]=records[75]; //Head 6 On Time
	gs_test_w_buff[50]=records[76]; //Head 7 On Time
	gs_test_w_buff[51]=records[77]; //Head 8 On Time
	gs_test_w_buff[52]=records[78]; //Head 9 On Time
	gs_test_w_buff[53]=records[79]; //Head 10 On Time
	gs_test_w_buff[54]=records[80]; //Head 11 On Time
	gs_test_w_buff[55]=records[81]; //Head 12 On Time
	gs_test_w_buff[56]=records[82]; //Head 13 On Time
	gs_test_w_buff[57]=records[83]; //Head 14 On Time
	gs_test_w_buff[58]=records[130]; //Tare Count [1]
	gs_test_w_buff[59]=records[132]; //Tare Count [2]
	gs_test_w_buff[60]=records[134]; //Tare Count [3]
	gs_test_w_buff[61]=records[136]; //Tare Count [4]
	gs_test_w_buff[62]=records[138]; //Tare Count [5]
	gs_test_w_buff[63]=records[140]; //Tare Count [6]
	gs_test_w_buff[64]=records[142]; //Tare Count [7]
	gs_test_w_buff[65]=records[144]; //Tare Count [8]
	gs_test_w_buff[66]=records[146]; //Tare Count [9]
	gs_test_w_buff[67]=records[148]; //Tare Count [10]
	gs_test_w_buff[68]=records[230]; //Tare Count [11]
	gs_test_w_buff[70]=records[231]; //Tare Count [12]
	gs_test_w_buff[71]=records[232]; //Tare Count [13]
	gs_test_w_buff[72]=records[233]; //Tare Count [14]
	gs_test_w_buff[73]=records[234]; //Tare Count [15]
	gs_test_w_buff[74]=records[150]; //Calib Count [1]
	gs_test_w_buff[75]=records[151]; //Calib Count [2]
	gs_test_w_buff[76]=records[152]; //Calib Count [3]
	gs_test_w_buff[77]=records[153]; //Calib Count [4]
	gs_test_w_buff[78]=records[154]; //Calib Count [5]
	gs_test_w_buff[79]=records[155]; //Calib Count [6]
	gs_test_w_buff[80]=records[156]; //Calib Count [7]
	gs_test_w_buff[81]=records[157]; //Calib Count [8]
	gs_test_w_buff[82]=records[158]; //Calib Count [9]
	gs_test_w_buff[83]=records[159]; //Calib Count [10]
	gs_test_w_buff[84]=records[220]; //Calib Count [11]
	gs_test_w_buff[85]=records[221]; //Calib Count [12]
	gs_test_w_buff[86]=records[222]; //Calib Count [13]
	gs_test_w_buff[87]=records[223]; //Calib Count [14]
	gs_test_w_buff[88]=records[224]; //Calib Count [15]
	gs_test_w_buff[89]=records[131]; //Calib Scope [1]
	gs_test_w_buff[90]=records[133]; //Calib Scope [2]
	gs_test_w_buff[91]=records[135]; //Calib Scope [3]
	gs_test_w_buff[92]=records[137]; //Calib Scope [4]
	gs_test_w_buff[93]=records[139]; //Calib Scope [5]
	gs_test_w_buff[94]=records[141]; //Calib Scope [6]
	gs_test_w_buff[95]=records[143]; //Calib Scope [7]
	gs_test_w_buff[96]=records[145]; //Calib Scope [8]
	gs_test_w_buff[97]=records[147]; //Calib Scope [9]
	gs_test_w_buff[98]=records[149]; //Calib Scope [10]
	gs_test_w_buff[99]=records[210]; //Calib Scope [11]
	gs_test_w_buff[100]=records[211]; //Calib Scope [12]
	gs_test_w_buff[101]=records[212]; //Calib Scope [13]
	gs_test_w_buff[102]=records[213]; //Calib Scope [14]
	gs_test_w_buff[103]=records[214]; //Calib Scope [15]
	gs_test_w_buff[104]=records[90]; //Reacharge %
	gs_test_w_buff[105]=records[91]; //Dry Weight %
	gs_test_w_buff[106]=records[92]; //Dry Weight inc
	gs_test_w_buff[107]=records[84]; //Main Feeder Firing
	gs_test_w_buff[108]=records[85]; //Main On Time
	write_run_data(gs_test_w_buff);
}

void flash_read_data()
{
	records[100] = gs_test_r_buff[0]; //Target_Wt
	records[101] = gs_test_r_buff[1]; //Target_Speed
	records[102] = gs_test_r_buff[2]; //NegErrorWt
	records[103] = gs_test_r_buff[3]; //PosErrorWt
	records[104] = gs_test_r_buff[4]; //Mainhead_Firing
	records[105] = gs_test_r_buff[5]; //All_head_firing
	records[106] = gs_test_r_buff[6]; //All_head_lf_ondelay
	records[107] = gs_test_r_buff[7]; //All_head_lf_ontime
	records[108] = gs_test_r_buff[8]; //All_head_fb_ondelay
	records[109] = gs_test_r_buff[9]; //All_head_fb_ontime
	records[110] = gs_test_r_buff[10]; //All_head_wb_ondelay
	records[111] = gs_test_r_buff[11]; //All_head_wb_ontime
	records[112] = gs_test_r_buff[12]; //All_head_cb_ondelay
	records[113] = gs_test_r_buff[13]; //All_head_cb_ontime
	records[114] = gs_test_r_buff[14]; //All_head_stepper_pattern
	records[115] = gs_test_r_buff[15]; //Discharge_ontime
	records[116] = gs_test_r_buff[16]; //MAX_STAGGER_TIME
	records[118] = gs_test_r_buff[18]; //NO_SELECT_COUNT
	records[119] = gs_test_r_buff[19]; //MHW_READY_TIME
	records[120] = gs_test_r_buff[20]; //ADC_GAIN
	records[121] = gs_test_r_buff[21]; //ADC_SPEED
	records[122] = gs_test_r_buff[22]; //ADC_SAMPLE
	records[123] = gs_test_r_buff[23]; //ADC_DIFFERENCE_COUNT
	records[124] = gs_test_r_buff[24]; //ADC_STABLE_COUNT
	records[125] = gs_test_r_buff[25]; //AUTO_ZERO_INTERVAL
	records[126] = gs_test_r_buff[26]; //WEIGHING_RANGE
	records[127] = gs_test_r_buff[27]; //COMPENSATION
	records[128] = gs_test_r_buff[28]; //STABLE_TIME
	records[170] = gs_test_r_buff[29]; //MULTI_DUMP_DIV_COUNT
	records[40] = gs_test_r_buff[30]; //Head 1 Amplitude
	records[41] = gs_test_r_buff[31]; //Head 2 Amplitude
	records[42]	= gs_test_r_buff[32]; //Head 3 Amplitude
	records[43] = gs_test_r_buff[33]; //Head 4 Amplitude
	records[44] = gs_test_r_buff[34]; //Head 5 Amplitude
	records[45] = gs_test_r_buff[35]; //Head 6 Amplitude
	records[46]	= gs_test_r_buff[36]; //Head 7 Amplitude
	records[47] = gs_test_r_buff[37]; //Head 8 Amplitude
	records[48] = gs_test_r_buff[38]; //Head 9 Amplitude
	records[49] = gs_test_r_buff[39]; //Head 10 Amplitude
	records[50] = gs_test_r_buff[40]; //Head 11 Amplitude
	records[51]	= gs_test_r_buff[41]; //Head 12 Amplitude
	records[52] = gs_test_r_buff[42]; //Head 13 Amplitude
	records[53]	= gs_test_r_buff[43]; //Head 14 Amplitude
	records[70]	= gs_test_r_buff[44]; //Head 1 On Time
	records[71]	= gs_test_r_buff[45]; //Head 2 On Time
	records[72]	= gs_test_r_buff[46]; //Head 3 On Time
	records[73] = gs_test_r_buff[47]; //Head 4 On Time
	records[74] = gs_test_r_buff[48]; //Head 5 On Time
	records[75] = gs_test_r_buff[49]; //Head 6 On Time
	records[76] = gs_test_r_buff[50]; //Head 7 On Time
	records[77] = gs_test_r_buff[51]; //Head 8 On Time
	records[78] = gs_test_r_buff[52]; //Head 9 On Time
	records[79]	= gs_test_r_buff[53]; //Head 10 On Time
	records[80]	= gs_test_r_buff[54]; //Head 11 On Time
	records[81] = gs_test_r_buff[55]; //Head 12 On Time
	records[82]	= gs_test_r_buff[56]; //Head 13 On Time
	records[83]	= gs_test_r_buff[57]; //Head 14 On Time
	records[130] = gs_test_r_buff[58]; //Tare Count [1]
	records[132] = gs_test_r_buff[59]; //Tare Count [2]
	records[134] = gs_test_r_buff[60]; //Tare Count [3]
	records[136] = gs_test_r_buff[61]; //Tare Count [4]
	records[138] = gs_test_r_buff[62]; //Tare Count [5]
	records[140] = gs_test_r_buff[63]; //Tare Count [6]
	records[142] = gs_test_r_buff[64]; //Tare Count [7]
	records[144] = gs_test_r_buff[65]; //Tare Count [8]
	records[146] = gs_test_r_buff[66]; //Tare Count [9]
	records[148] = gs_test_r_buff[67]; //Tare Count [10]
	records[230] = gs_test_r_buff[68]; //Tare Count [11]
	records[231] = gs_test_r_buff[70]; //Tare Count [12]
	records[232] = gs_test_r_buff[71]; //Tare Count [13]
	records[233] = gs_test_r_buff[72]; //Tare Count [14]
	records[234] = gs_test_r_buff[73]; //Tare Count [15]
	records[150] = gs_test_r_buff[74]; //Calib Count [1]
	records[151] = gs_test_r_buff[75]; //Calib Count [2]
	records[152] = gs_test_r_buff[76]; //Calib Count [3]
	records[153] = gs_test_r_buff[77]; //Calib Count [4]
	records[154] = gs_test_r_buff[78]; //Calib Count [5]
	records[155] = gs_test_r_buff[79]; //Calib Count [6]
	records[156] = gs_test_r_buff[80]; //Calib Count [7]
	records[157] = gs_test_r_buff[81]; //Calib Count [8]
	records[158] = gs_test_r_buff[82]; //Calib Count [9]
	records[159] = gs_test_r_buff[83]; //Calib Count [10]
	records[220] = gs_test_r_buff[84]; //Calib Count [11]
	records[221] = gs_test_r_buff[85]; //Calib Count [12]
	records[222] = gs_test_r_buff[86]; //Calib Count [13]
	records[223] = gs_test_r_buff[87]; //Calib Count [14]
	records[224] = gs_test_r_buff[88]; //Calib Count [15]
	records[131] = gs_test_r_buff[89]; //Calib Scope [1]
	records[133] = gs_test_r_buff[90]; //Calib Scope [2]
	records[135] = gs_test_r_buff[91]; //Calib Scope [3]
	records[137] = gs_test_r_buff[92]; //Calib Scope [4]
	records[139] = gs_test_r_buff[93]; //Calib Scope [5]
	records[141] = gs_test_r_buff[94]; //Calib Scope [6]
	records[143] = gs_test_r_buff[95]; //Calib Scope [7]
	records[145] = gs_test_r_buff[96]; //Calib Scope [8]
	records[147] = gs_test_r_buff[97]; //Calib Scope [9]
	records[149] = gs_test_r_buff[98]; //Calib Scope [10]
	records[210] = gs_test_r_buff[99]; //Calib Scope [11]
	records[211] = gs_test_r_buff[100]; //Calib Scope [12]
	records[212] = gs_test_r_buff[101]; //Calib Scope [13]
	records[213] = gs_test_r_buff[102]; //Calib Scope [14]
	records[214] = gs_test_r_buff[103]; //Calib Scope [15]
	records[90] = gs_test_r_buff[104]; //Reacharge %
	records[91] = gs_test_r_buff[105]; //Dry Weight %
	records[92] = gs_test_r_buff[106]; //Dry Weight inc
	records[84] = gs_test_r_buff[107]; //Main Feeder Firing
	records[85] = gs_test_r_buff[108]; //Main On Time
}

/* End of File */




